#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    argv = require('optimist').argv,
    async = require('async'),
    ddocs = require('../ddocs'),
    codeps = require('../index');

var registry = argv.r || 'http://localhost:5984/registry',
    package  = argv.p || 'winston',
    view     = argv.v,
    skip     = argv.s || 0;
    top      = argv.t || 10;

if (argv.h || argv.help) {
  console.log('usage: codeps -r [registry] -p [package]');
  return process.exit(1);
}

console.log('start   | co-*dependencies');
console.log('seed    | %s', registry);
ddocs.seed(registry, function (err) {
  if (err) { throw err; }

  //
  // Dump the options being used.
  //
  console.log([
    'options | ',
    '  registry: %s',
    '  package:  %s',
    '  view:     %s',
    '  top:      %s',
    '----------------------------'
  ].join('\n'), registry, package, view || 'ALL', top);
  codeps({
    package:  package,
    registry: registry,
    skip:     skip,
    top:      top,
    debug:    process.env['DEBUG']
  }, function (err, results) {
    if (err) {
      console.dir(err);
      return process.exit(1)
    }

    //
    // Delete all of the "links" from the set of results
    // so that we can reduce bandwidth
    //
    Object.keys(results).forEach(function (key) {
      delete results[key].links;
    });

    //
    // Dump two kinds of JSON for now
    // - all:     All relevant data (very large).
    // - display: Exactly the data to send to the browser.
    //
    var output = {
      display: {
        files: [
          path.join(__dirname, '..', 'samples', package + '.json'),
          path.join(__dirname, '..', 'public', 'samples', package + '.json'),
        ],
        data: JSON.stringify(results, null, 2)
      }
    };

    //
    // ### writeFiles (type, callback)
    // Writes all files of the specified type
    //
    function writeFiles(type, callback) {
      async.forEach(output[type].files, function (file, next) {
        console.log('Write %s', file);
        fs.writeFile(file, output[type].data, 'utf-8', next);
      }, callback);
    }

    async.parallel([
      async.apply(writeFiles, 'display')
    ], function (err) {
      if (err) {
        throw err;
      }

      console.log('%s co-*dependencies | ok', package);
    })
  });
});
