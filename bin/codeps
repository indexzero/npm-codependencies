#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    argv = require('optimist').argv,
    async = require('async'),
    ddocs = require('../ddocs'),
    inspect = require('../inspect'),
    matrix = require('../matrix'),
    weights = require('../weights');

var registry = argv.r || 'http://localhost:5984/registry',
    package  = argv.p || 'winston',
    view     = argv.v || 'dependencies',
    skip     = argv.s || 0;
    top      = argv.t || 10;

console.log('start   | co-*dependencies');
console.log('seed    | %s', registry);
ddocs.seed(registry, function (err) {
  if (err) { throw err; }

  //
  // Dump the options being used.
  //
  console.log([
    'options | ',
    '  registry: %s',
    '  package:  %s',
    '  view:     %s',
    '  top:      %s',
    '----------------------------'
  ].join('\n'), registry, package, view, top);

  //
  // ### function zeroArray(len)
  // Return a zero-filled array of len
  //
  function zeroArray(len) {
    return Array.apply(null, new Array(len))
      .map(Number.prototype.valueOf, 0);
  }

  matrix({
    package:  package,
    registry: registry,
    skip:     skip,
    top:      top
  }, function (err, codeps, pkg) {
    if (err) { throw err; }

    var names  = Object.keys(codeps).sort().filter(function (n) { return n !== 'total' }),
        matrix = [],
        values = [];

    //
    // For each of the codeps in rows
    // return an Array of values for only
    // it's peers
    //
    names.forEach(function (name) {
      var row   = zeroArray(top),
          value = zeroArray(top);

      names.forEach(function (coname) {
        if (name === coname) { return }

        var index = names.indexOf(coname);
        if (index !== -1 && codeps[name][coname]) {
          value[index] = codeps[name][coname].count;
          row[index]   = codeps[name][coname].count
            * (codeps[name][coname].count / codeps[name].total)
            * pkg[name].relative;

          //
          // TODO: Make this logging configurable with more
          // granularity than just DEBUG=true
          // console.log(index, row[index], name, coname);
          //
        }
      });

      matrix.push(row);
      values.push(value);
    });

    if (process.env.DEBUG) {
      inspect.codeps({
        name: package,
        lattice: pkg,
        names: names,
        codeps: codeps,
        matrix: matrix,
        values: values
      });
    }

    //
    // Dump two kinds of JSON for now
    // - all:     All relevant data (very large).
    // - display: Exactly the data to send to the browser.
    //
    var output = {
      all: {
        files: [
          path.join(__dirname, '..', 'samples', package + '.json'),
          path.join(__dirname, '..', 'public', 'samples', package + '.json')
        ],
        data: JSON.stringify({
          codependencies: codeps,
          package: pkg
        }, null, 2)
      },
      display: {
        files: [
          path.join(__dirname, '..', 'samples', package + '-display.json'),
          path.join(__dirname, '..', 'public', 'samples', package + '-display.json'),
        ],
        data: JSON.stringify({
          names: names,
          matrix: matrix
        }, null, 2)
      }
    };

    //
    // ### writeFiles (type, callback)
    // Writes all files of the specified type
    //
    function writeFiles(type, callback) {
      async.forEach(output[type].files, function (file, next) {
        console.log('Write %s', file);
        fs.writeFile(file, output[type].data, 'utf-8', next);
      }, callback);
    }

    async.parallel([
      async.apply(writeFiles, 'all'),
      async.apply(writeFiles, 'display')
    ], function (err) {
      if (err) {
        throw err;
      }

      console.log('%s co-*dependencies | ok', package);
    })
  });
});
