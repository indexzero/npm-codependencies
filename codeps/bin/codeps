#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    argv = require('optimist').argv,
    ddocs = require('../ddocs'),
    inspect = require('../inspect'),
    matrix = require('../matrix'),
    weights = require('../weights');

var registry = argv.r || 'http://localhost:5984/registry',
    package  = argv.p || 'winston'

ddocs.seed({
  registry: registry
}, function (err) {
  if (err) {
    throw err;
  }

  matrix({
    package: package,
    registry: registry,
    //
    // TODO: Parameterized this
    //
    top: 10
  }, function (err, codeps, pkg) {
    if (err) {
      throw err;
    }

    function values (relate) {
      return Object.keys(relate).map(function (name) {
        return relate[name].count;
      });
    }

    var names  = Object.keys(codeps).sort().filter(function (n) { return n !== 'total' }),
        matrix = [];

    //
    // For each of the codeps in rows
    // return an Array of values for only
    // it's peers
    //
    names.forEach(function (name) {
      var row = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      names.forEach(function (coname) {
        if (name === coname) { return }

        var index = names.indexOf(coname);
        if (index !== -1 && codeps[name][coname]) {
          row[index] = codeps[name][coname].count
            * (codeps[name][coname].count / codeps[name].total)
            * pkg[name].relative;
        }
      });

      matrix.push(row);
    });


    inspect.codeps({
      name: package,
      lattice: pkg,
      names: names,
      codeps: codeps,
      matrix: matrix
    });


    //
    // ### Dump the whole JSON
    //
    fs.writeFile(
      path.join(__dirname, '..', 'samples', package + '.json'),
      JSON.stringify({
        codependencies: codeps,
        package: pkg
      }, null, 2),
      'utf8',
      console.log
    );

    fs.writeFile(
      path.join(__dirname, '..', 'samples', package + '-display.json'),
      JSON.stringify({
        names: names,
        matrix: matrix
      }, null, 2),
      'utf8',
      console.log
    );
  });
});
